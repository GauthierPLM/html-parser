/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;

  LOOKAHEAD= 2;
}

PARSER_BEGIN(HtmlGrammar)
package Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.IOException;

public class HtmlGrammar
{
  private static TagRecord tr;

  private static boolean eof;

  public static void main(String args []) throws ParseException
  {
    eof = false;
    tr = new TagRecord();
    InputStream i;
    try
    {
      i = new FileInputStream(new File("/Users/gauthier/eclipse-workspace/javacc/src/Test/tests"));
    }
    catch (IOException e)
    {
      i = System.in;
      System.out.println("Use stdin");
    }
    HtmlGrammar parser = new HtmlGrammar(i);
    while (eof == false)
    {
      parser.one_line();
      System.out.println(tr);
    }
  }
}

PARSER_END(HtmlGrammar)

SKIP :
{
  "\r"
| "\t"
}

TOKEN :
{
  < TAG_START : "<" >
| < TAG_END : ">" >
| < TAG_SLASHEND : "/>" >
| < ENDTAG_START : "</" >
| < EQUAL : "=" >
| < #ALPHA_CHAR : [ "a"-"z", "A"-"Z" ] >
| < #NUM_CHAR : [ "0"-"9" ] >
| < #ALPHANUM_CHAR : [ "a"-"z", "A"-"Z", "0"-"9" ] >
| < #IDENTIFIER_CHAR : [ "a"-"z", "A"-"Z", "0"-"9", "_", "-", ".", ":" ] >
| < #IDENTIFIER : < ALPHA_CHAR > (< IDENTIFIER_CHAR >)* >
| < TAG_NAME : < IDENTIFIER > >
| < ATTRIBUTE_NAME : < IDENTIFIER > >
| < ATTRIBUTE_VALUE : < IDENTIFIER > >
| < EOL :
    "\n"
  | "\r\n" >
}

SPECIAL_TOKEN :
{
  < WHITESPACE : [ " ", "\t" ] >
}

void one_line() :
{
}
{
  (
    expr()
  )+
  < EOL >
| < EOL >
  {
    System.out.println("EOL");
  }
| < EOF >
  {
    eof = true;
    System.out.println("EOF");
  }
}

void expr() :
{
}
{
  tag()
  (
    expr()
  )*
  (
    endTag()
  )?
}

void tag() :
{
  Token t, et;
}
{
  < TAG_START > t = < TAG_NAME >
  (
    et = < TAG_END >
  | et = < TAG_SLASHEND >
  )
  {
    if (et.kind == TAG_SLASHEND)
    {
      tr.record(t);
      System.out.println("Single tag " + t);
    }
    else
    {
      tr.record(t);
      System.out.println("Open tag " + t);
    }
  }
}

void endTag() :
{
  Token t;
  Token firstToken = getToken(1);
}
{
  < ENDTAG_START > t = < TAG_NAME > < TAG_END >
  {
    System.out.println("Closing tag " + t);
  }
}

void attribute() :
{
}
{
  < ATTRIBUTE_NAME > 
}
